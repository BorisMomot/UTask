swagger: '2.0'
info:
  version: 0.0.1
  title: Pet project for tasks managment
  description: Declare Api between chat bot and server part
  contact:
    email: bolik-u13@mail.ru
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
# --------------------------------------------------------------------
# --------------------------------------------------------------------
# --------------------------------------------------------------------
tags:
  - name: user
    description: Operations about user
  - name: role
    description: Role add users in groups and manage them on this abstraction level
  - name: project
    description: Access to project 
  - name: task
    description: Manage projects task

# --------------------------------------------------------------------
# --------------------------------------------------------------------
# --------------------------------------------------------------------
paths:
# --------------------------------------------------------------------
# Добавить список фильров

  /users:
    get:
      tags:
        - user
      summary: Print all users in system
      description: Return array of users
      operationId: getUsers
      produces:
        - application/xml
        - application/json
      parameters:
        - name: filterField
          in: query
          description: The filter filed
          required: false
          type: string
        - name: filterValue
          in: query
          description: The filter value
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/UserInfo'
          
        '202':
          description: In case query needs long time
        '400':
          description: Invalid username/password supplied
  
  /userfilters:
    get:
      tags:
        - user
      summary: Print all available filters for users
      description: Return array of filters
      operationId: getUsersFilters
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/UserFilter'
          
        '202':
          description: In case query needs long time
        '400':
          description: Doesn't find anything
  
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: User that needed to add to the system
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '201':
          description: successful operation
        '405':
          description: Invalid input
  '/username/{username}':
    get:
      tags:
        - user
      summary: Get user id by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: integer
            format: int64
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  '/user/{userId}':
    get:
      tags:
        - user
      summary: Get user by user id
      description: Return single user
      operationId: getUserById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: userId
          in: path
          description: The name that needs to be fetched.
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UserInfo'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    patch:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: name that need to be updated
          required: true
          type: integer
          format: int64
        - name: userfiled
          in: query
          description: field that need to be updated
          required: true
          type: string
        - name: uservalue
          in: query
          description: value that need to be updated
          required: true
          type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The name that needs to be deleted
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Successfull delete
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
# --------------------------------------------------------------------
  /projects:
    get:
      tags:
        - project
      summary: All users in system
      operationId: getProject
      produces:
        - application/xml
        - application/json
      parameters:
        - name: filterfield
          in: query
          description: The filter filed
          required: false
          type: string
        - name: filtervalue
          in: query
          description: The filter value
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/ProjectInfo'
        '400':
          description: Invalid parameters
        '404':
          description: No project with this parameters
  /projectfilters:
    get:
      tags:
        - project
      summary: Print all available filters for project
      description: Return array of filters
      operationId: getProjectsFilters
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/ProjectFilter'
          
        '202':
          description: In case query needs long time
        '400':
          description: Doesn't find anything
# --------------------------------------------------------------------
  /roles:
      get:
        tags:
          - role
        summary: Print all roles in system
        description: Return array of roles
        operationId: getRoles
        produces:
          - application/xml
          - application/json
        responses:
          '200':
            description: successful operation
            schema:
              type: array
              items:
                $ref: '#/definitions/RoleInfo'
            
          '202':
            description: In case query needs long time
          '400':
            description: Invalid username/password supplied
  /role:
    post:
      tags:
        - role
      summary: Create role
      description: Create role
      operationId: createRole
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Role that needed to add to the system
          required: true
          schema:
            $ref: '#/definitions/Role'
      responses:
        '201':
          description: successful operation
        '405':
          description: Invalid input
  '/role/{roleId}':
    get:
      tags:
        - role
      summary: Get role by user id
      description: Return single role
      operationId: getRoleById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: roleId
          in: path
          description: The name that needs to be fetched.
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/RoleInfo'
        '400':
          description: Invalid id supplied
        '404':
          description: Role not found
    delete:
      tags:
        - role
      summary: Delete role
      description: Delete role
      operationId: deleteRole
      parameters:
        - name: roleId
          in: path
          description: The name that needs to be deleted
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Successfull delete
        '400':
          description: Invalid id supplied
        '404':
          description: Id not found
# --------------------------------------------------------------------
  /tasks:
      get:
        tags:
          - task
        summary: Print all tasks in system
        description: Return array of tasks
        operationId: getTasks
        produces:
          - application/xml
          - application/json
        parameters:
          - name: filterField
            in: query
            description: The filter filed
            required: false
            type: string
          - name: filterValue
            in: query
            description: The filter value
            required: false
            type: string
        responses:
          '200':
            description: successful operation
            schema:
              type: array
              items:
                $ref: '#/definitions/TaskInfo'
            
          '202':
            description: In case query needs long time
          '400':
            description: Invalid taskname/password supplied
  /taskfilters:
    get:
      tags:
        - task
      summary: Print all available filters for task
      description: Return array of filters
      operationId: getTaskFilters
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/TaskFilter'
          
        '202':
          description: In case query needs long time
        '400':
          description: Doesn't find anything
  
  /task:
    post:
      tags:
        - task
      summary: Create task
      description: This can only be done by the logged in task.
      operationId: createTask
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Task that needed to add to the system
          required: true
          schema:
            $ref: '#/definitions/Task'
      responses:
        '201':
          description: successful operation
        '405':
          description: Invalid input
  '/taskname/{taskName}':
    get:
      tags:
        - task
      summary: Get task id by task name
      operationId: getTaskByName
      parameters:
        - name: taskName
          in: path
          description: The name that needs to be fetched.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: integer
            format: int64
        '400':
          description: Invalid taskname supplied
        '404':
          description: Task not found
  '/task/{taskId}':
    get:
      tags:
        - task
      summary: Get task by task id
      description: Return single task
      operationId: getTaskById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: taskId
          in: path
          description: The name that needs to be fetched.
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UserInfo'
        '400':
          description: Invalid taskname supplied
        '404':
          description: User not found
    patch:
      tags:
        - task
      summary: Updated task
      description: This can only be done by the logged in task.
      operationId: updateTask
      parameters:
        - name: taskId
          in: path
          description: name that need to be updated
          required: true
          type: integer
          format: int64
        - name: taskfiled
          in: query
          description: field that need to be updated
          required: true
          type: string
        - name: taskvalue
          in: query
          description: value that need to be updated
          required: true
          type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid task supplied
        '404':
          description: User not found
    delete:
      tags:
        - task
      summary: Delete task
      description: This can only be done by the logged in task.
      operationId: deleteTask
      parameters:
        - name: taskId
          in: path
          description: The name that needs to be deleted
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Successfull delete
        '400':
          description: Invalid taskname supplied
        '404':
          description: User not found

# Добавить список фильров



# ///////////////////////////////////////////////
# ///////////////////////////////////////////////
# ///////////////////////////////////////////////
# ///////////////////////////////////////////////

# components:
definitions:
    # --------------------------------------------------------------------
    UserInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
        userRoles:  
          type: array
          items: 
            type: integer
            format: int64
      xml:
        name: UserInfo
    
    UserFilter:
      type: object
      properties:
        filterName:
          type: string
        filterValues:  
          type: array
          items: 
            type: string
      xml:
        name: UserFilter
    
    User:
      type: object
      properties:
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
      xml:
        name: User
    

    # --------------------------------------------------------------------
    RoleInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
      xml:
        name: RoleInfo
        
    Role:
      type: object
      properties:
        rolename:
          type: string
        description:
          type: string
      xml:
        name: Role
    # --------------------------------------------------------------------
    ProjectInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
      xml:
        name: ProjectInfo
    ProjectFilter:
      type: object
      properties:
        filterName:
          type: string
        filterValues:  
          type: array
          items: 
            type: string
      xml:
        name: ProjectFilter
    # Project:
    #   type: object
    #   properties:
    #     name:
    #       type: string
    #     description:
    #       type: string
    #   xml:
    #     name: Project
    # --------------------------------------------------------------------
    TaskInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        priority:
          type: integer
          format: int64
        name:
          type: string
        status:
          type: string
        usercreator:
          type: integer
          format: int64
        userexecutor:
          type: integer
          format: int64
        description:
          type: string
        stored:
          type: string
      xml:
        name: ProjectInfo
    TaskFilter:
      type: object
      properties:
        filterName:
          type: string
        filterValues:  
          type: array
          items: 
            type: string
      xml:
        name: TaskFilter
    Task:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        usercreator:
          type: integer
          format: int64
        userexecutor:
          type: integer
          format: int64
        priority:
          type: integer
          format: int64
        status:
          type: string
        stored:
          type: string
          enum:
            - bugzilla
            - ytrack
      xml:
        name: Project
    # --------------------------------------------------------------------
    

# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /nii/UTask/0.0.1
schemes:
 - https
 
 
 
 
 
 
 
 
 
 
 

 

  





# --------------------------------------------------------------------
# --------------------------------------------------------------------
# --------------------------------------------------------------------
