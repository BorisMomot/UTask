openapi: 3.0.0
info:
  description: |
    This is a sample Task server for pet project. 
  version: "0.0.1"
  title: Tasks Petproject
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: bolik-u13@mail.ru
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/BorisMomot/UTask/0.0.1
  - url: 'https://utask.swagger.io/v2'
# --------------------------------------------------------------------
# --------------------------------------------------------------------
# --------------------------------------------------------------------
tags:
  - name: user
    description: Operations about user
  - name: group
    description: Group users in groups and manage them on this abstraction level
  - name: project
    description: Access to project 
  - name: task
    description: Manage projects task
# --------------------------------------------------------------------
# --------------------------------------------------------------------
# --------------------------------------------------------------------
paths:
# --------------------------------------------------------------------
  /users:
    get:
      tags:
        - user
      summary: Print all users in system
      operationId: getUsers
      parameters:
        - name: filterField
          in: query
          description: The filter filed
          required: false
          schema:
            type: string
        - name: filterValue
          in: query
          description: The filter value
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '202':
          description: In case query needs long time
        '400':
          description: Invalid username/password supplied
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        '201':
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user id by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int64
            application/xml:
              schema:
                type: integer
                format: int64
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  '/user/{userid}':
    get:
      tags:
        - user
      summary: Get user by user id
      operationId: getUserById
      parameters:
        - name: userid
          in: path
          description: The name that needs to be fetched.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    patch:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userid
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: userfiled
          in: query
          description: field that need to be updated
          required: true
          schema:
            type: string
        - name: uservalue
          in: query
          description: value that need to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      # requestBody:
      #   content:
      #     application/json:
      #       schema:
      #         $ref: '#/components/schemas/User'
      #   description: Updated user object
      #   required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userid
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfull delete
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
# --------------------------------------------------------------------
  /projects:
    get:
      tags:
        - project
      summary: All users in system
      operationId: getProject
      parameters:
        - name: filterfield
          in: query
          description: The filter filed
          required: false
          schema:
            type: string
        - name: filtervalue
          in: query
          description: The filter value
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          # headers:
          #   X-Rate-Limit:
          #     description: calls per hour allowed by the user
          #     schema:
          #       type: integer
          #       format: int32
          #   X-Expires-After:
          #     description: date in UTC when token expires
          #     schema:
          #       type: string
          #       format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectInfo'
            application/xml:
              schema:
                $ref: '#/components/schemas/ProjectInfo'
        '400':
          description: Invalid parameters
        '404':
          description: No project with this parameters
  /project:
    post:
      tags:
        - project
      summary: Add a new task to the store
      operationId: addProject
      responses:
        '201':
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        description: Created project object
        required: true
  '/project/{projectname}':
    get:
      tags:
        - project
      summary: Get projectid by name
      operationId: getProjectByName
      parameters:
        - name: projectname
          in: path
          description: The name that needs to be fetched.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int64
            application/xml:
              schema:
                type: integer
                format: int64
        '400':
          description: Invalid projectname supplied
        '404':
          description: Project not found
  '/project/{projectid}':
    get:
      tags:
        - project
      summary: Get project info by id
      operationId: getProjectById
      parameters:
        - name: projectid
          in: path
          description: The name that needs to be fetched.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectInfo'
            application/xml:
              schema:
                $ref: '#/components/schemas/ProjectInfo'
        '400':
          description: Invalid projectname supplied
        '404':
          description: Project not found
    patch:
      tags:
        - project
      summary: Update project
      description: Update project
      operationId: updateProject
      parameters:
        - name: projectid
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: groupFiled
          in: query
          description: field that need to be updated
          required: true
          schema:
            type: string
        - name: groupValue
          in: query
          description: value that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid  project id supplied
        '404':
          description: Project not found
    delete:
      tags:
        - project
      summary: Delete project
      description: This can only be done by the logged in user.
      operationId: deleteProject
      parameters:
        - name: projectid
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
# --------------------------------------------------------------------
  /groups:
    get:
      tags:
        - group
      summary: All groups in system
      operationId: getGroup
      parameters:
        - name: filterField
          in: query
          description: The filter filed
          required: false
          schema:
            type: string
        - name: filterValue
          in: query
          description: The filter value
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupInfo'
            application/xml:
              schema:
                $ref: '#/components/schemas/GroupInfo'
        '400':
          description: Invalid username/password supplied
  /group:
    post:
      tags:
        - group
      summary: Add a new group 
      operationId: addGroup
      responses:
        '201':
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        description: Created group object
        required: true
  '/group/{groupname}':
    get:
      tags:
        - group
      summary: Get task group id
      operationId: getGroupIdByName
      parameters:
        - name: groupname
          in: path
          description: The name that needs to be fetched. 
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int64
            application/xml:
              schema:
                type: integer
                format: int64
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  '/group/{groupid}':
    get:
      tags:
        - group
      summary: Get group info by id
      operationId: getGroupById
      parameters:
        - name: groupid
          in: path
          description: The name that needs to be fetched. Use 1 for testing.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupInfo'
            application/xml:
              schema:
                $ref: '#/components/schemas/GroupInfo'
        '400':
          description: Invalid group id supplied
        '404':
          description: Group not found
    patch:
      tags:
        - group
      summary: Update group
      description: This can only be done by the logged in user.
      operationId: updateGroup
      parameters:
        - name: groupid
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: groupFiled
          in: query
          description: field that need to be updated
          required: true
          schema:
            type: string
        - name: groupValue
          in: query
          description: value that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid groupid supplied
        '404':
          description: Group id not found
    delete:
      tags:
        - group
      summary: Delete group
      description: This can only be done by the logged in user.
      operationId: deleteGroup
      parameters:
        - name: groupid
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid groupid supplied
        '404':
          description: Group id not found
# --------------------------------------------------------------------
  /tasks:
    get:
      tags:
        - task
      summary: All tasks in system
      operationId: getTasks
      parameters:
        - name: filterField
          in: query
          description: The filter filed
          required: false
          schema:
            type: string
        - name: filterValue
          in: query
          description: The filter value
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupInfo'
            application/xml:
              schema:
                $ref: '#/components/schemas/GroupInfo'
        '400':
          description: Invalid fiter type or filter value
        '404':
          description: Didn't find any tasks 
  /task:
    post:
      tags:
        - task
      summary: Add a new task 
      operationId: addTask
      responses:
        '201':
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        description: Created Task object
        required: true
  '/task/{taskname}':
    get:
      tags:
        - task
      summary: Get task by Id
      operationId: getTaskIdByName
      parameters:
        - name: taskname
          in: path
          description: The name that needs to be fetched.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int64
            application/xml:
              schema:
                type: integer
                format: int64
        '400':
          description: Invalid task name supplied
        '404':
          description: Task not found
  '/task/{taskid}':
    get:
      tags:
        - task
      summary: Get task by user id
      operationId: getTaskById
      parameters:
        - name: taskid
          in: path
          description: The name that needs to be fetched. Use 1 for testing.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInfo'
            application/xml:
              schema:
                $ref: '#/components/schemas/TaskInfo'
        '400':
          description: Invalid id supplied
        '404':
          description: Task not found
    put:
      tags:
        - task
      summary: Updated task
      description: This can only be done by the logged in user.
      operationId: updateTask
      parameters:
        - name: taskid
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: userFiled
          in: query
          description: field that need to be updated
          required: true
          schema:
            type: string
        - name: userValue
          in: query
          description: value that need to be updated
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Parameter was changed
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - task
      summary: Delete task
      description: This can only be done by the logged in user.
      operationId: deleteTask
      parameters:
        - name: taskid
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid task id supplied
        '404':
          description: Task not found
# --------------------------------------------------------------------
# --------------------------------------------------------------------
# --------------------------------------------------------------------
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
# --------------------------------------------------------------------
# --------------------------------------------------------------------
# --------------------------------------------------------------------
components:
  schemas:
    # --------------------------------------------------------------------
    UserInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: UserInfo
    User:
      type: object
      properties:
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
      xml:
        name: User
    # --------------------------------------------------------------------
    GroupInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
      xml:
        name: ProjectInfo
    Group:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      xml:
        name: Project
    # --------------------------------------------------------------------
    ProjectInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
      xml:
        name: ProjectInfo
    Project:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      xml:
        name: Project
    # --------------------------------------------------------------------
    TaskInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        priority:
          type: integer
          format: int64
        name:
          type: string
        status:
          type: string
        usercreator:
          type: integer
          format: int64
        userexecutor:
          type: integer
          format: int64
        description:
          type: string
      xml:
        name: ProjectInfo
    Task:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        usercreator:
          type: integer
          format: int64
        userexecutor:
          type: integer
          format: int64
        priority:
          type: integer
          format: int64
        status:
          type: string
      xml:
        name: Project
    # --------------------------------------------------------------------
    
    
    # ApiResponse:
    #   type: object
    #   properties:
    #     code:
    #       type: integer
    #       format: int32
    #     type:
    #       type: string
    #     message:
    #       type: string
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Task'
        application/xml:
          schema:
            $ref: '#/components/schemas/Task'
      description: Pet object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    utask_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://utask.swagger.io/oauth/dialog'
          scopes:
            'write:task': modify task in your account
            'read:task': read your task
    api_key:
      type: apiKey
      name: api_key
      in: header
