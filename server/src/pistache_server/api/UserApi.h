/**
* Pet project for tasks managment
* Declare Api between chat bot and server part
*
* OpenAPI spec version: 0.0.1
* Contact: bolik-u13@mail.ru
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * UserApi.h
 *
 * 
 */

#ifndef UserApi_H_
#define UserApi_H_


#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include "ProjectFilter.h"
#include "ProjectInfo.h"
#include "Role.h"
#include "RoleInfo.h"
#include "Task.h"
#include "TaskFilter.h"
#include "TaskInfo.h"
#include "User.h"
#include "UserFilter.h"
#include "UserInfo.h"
#include <string>

namespace io {
namespace swagger {
namespace server {
namespace api {

using namespace io::swagger::server::model;

class  UserApi {
public:
    UserApi(Pistache::Address addr);
    virtual ~UserApi() {};
    void init(size_t thr);
    void start();
    void shutdown();

    const std::string base = "/nii/UTask/0.0.1";

private:
    void setupRoutes();

    void create_role_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void create_task_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void create_user_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void delete_role_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void delete_task_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void delete_user_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_project_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_projects_filters_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_role_by_id_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_roles_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_task_by_id_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_task_by_name_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_task_filters_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_tasks_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_user_by_id_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_user_by_name_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_users_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_users_filters_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void update_task_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void update_user_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void user_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    std::shared_ptr<Pistache::Http::Endpoint> httpEndpoint;
    Pistache::Rest::Router router;


    /// <summary>
    /// Create role
    /// </summary>
    /// <remarks>
    /// Create role
    /// </remarks>
    /// <param name="body">Role that needed to add to the system</param>
    virtual void create_role(const Role &body, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Create task
    /// </summary>
    /// <remarks>
    /// This can only be done by the logged in task.
    /// </remarks>
    /// <param name="body">Task that needed to add to the system</param>
    virtual void create_task(const Task &body, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Create user
    /// </summary>
    /// <remarks>
    /// This can only be done by the logged in user.
    /// </remarks>
    /// <param name="body">User that needed to add to the system</param>
    virtual void create_user(const User &body, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Delete role
    /// </summary>
    /// <remarks>
    /// Delete role
    /// </remarks>
    /// <param name="roleId">The name that needs to be deleted</param>
    virtual void delete_role(const int64_t &roleId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Delete task
    /// </summary>
    /// <remarks>
    /// This can only be done by the logged in task.
    /// </remarks>
    /// <param name="taskId">The name that needs to be deleted</param>
    virtual void delete_task(const int64_t &taskId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Delete user
    /// </summary>
    /// <remarks>
    /// This can only be done by the logged in user.
    /// </remarks>
    /// <param name="userId">The name that needs to be deleted</param>
    virtual void delete_user(const int64_t &userId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// All users in system
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="filterfield">The filter filed (optional)</param>
    /// <param name="filtervalue">The filter value (optional)</param>
    virtual void get_project(const std::optional<std::string> &filterfield, const std::optional<std::string> &filtervalue, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Print all available filters for project
    /// </summary>
    /// <remarks>
    /// Return array of filters
    /// </remarks>
    virtual void get_projects_filters(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Get role by user id
    /// </summary>
    /// <remarks>
    /// Return single role
    /// </remarks>
    /// <param name="roleId">The name that needs to be fetched.</param>
    virtual void get_role_by_id(const int64_t &roleId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Print all roles in system
    /// </summary>
    /// <remarks>
    /// Return array of roles
    /// </remarks>
    virtual void get_roles(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Get task by task id
    /// </summary>
    /// <remarks>
    /// Return single task
    /// </remarks>
    /// <param name="taskId">The name that needs to be fetched.</param>
    virtual void get_task_by_id(const int64_t &taskId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Get task id by task name
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="taskName">The name that needs to be fetched.</param>
    virtual void get_task_by_name(const std::string &taskName, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Print all available filters for task
    /// </summary>
    /// <remarks>
    /// Return array of filters
    /// </remarks>
    virtual void get_task_filters(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Print all tasks in system
    /// </summary>
    /// <remarks>
    /// Return array of tasks
    /// </remarks>
    /// <param name="filterField">The filter filed (optional)</param>
    /// <param name="filterValue">The filter value (optional)</param>
    virtual void get_tasks(const std::optional<std::string> &filterField, const std::optional<std::string> &filterValue, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Get user by user id
    /// </summary>
    /// <remarks>
    /// Return single user
    /// </remarks>
    /// <param name="userId">The name that needs to be fetched.</param>
    virtual void get_user_by_id(const int64_t &userId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Get user id by user name
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="username">The name that needs to be fetched.</param>
    virtual void get_user_by_name(const std::string &username, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Print all users in system
    /// </summary>
    /// <remarks>
    /// Return array of users
    /// </remarks>
    /// <param name="filterField">The filter filed (optional)</param>
    /// <param name="filterValue">The filter value (optional)</param>
    virtual void get_users(const std::optional<std::string> &filterField, const std::optional<std::string> &filterValue, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Print all available filters for users
    /// </summary>
    /// <remarks>
    /// Return array of filters
    /// </remarks>
    virtual void get_users_filters(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Updated task
    /// </summary>
    /// <remarks>
    /// This can only be done by the logged in task.
    /// </remarks>
    /// <param name="taskId">name that need to be updated</param>
    /// <param name="taskfiled">field that need to be updated</param>
    /// <param name="taskvalue">value that need to be updated</param>
    virtual void update_task(const int64_t &taskId, const std::optional<std::string> &taskfiled, const std::optional<std::string> &taskvalue, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Updated user
    /// </summary>
    /// <remarks>
    /// This can only be done by the logged in user.
    /// </remarks>
    /// <param name="userId">name that need to be updated</param>
    /// <param name="userfiled">field that need to be updated</param>
    /// <param name="uservalue">value that need to be updated</param>
    virtual void update_user(const int64_t &userId, const std::optional<std::string> &userfiled, const std::optional<std::string> &uservalue, Pistache::Http::ResponseWriter &response) = 0;

};

}
}
}
}

#endif /* UserApi_H_ */

