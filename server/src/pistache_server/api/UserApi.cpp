/**
* Pet project for tasks managment
* Declare Api between chat bot and server part
*
* OpenAPI spec version: 0.0.1
* Contact: bolik-u13@mail.ru
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/

#include "UserApi.h"

namespace io {
namespace swagger {
namespace server {
namespace api {

using namespace io::swagger::server::model;

UserApi::UserApi(Pistache::Address addr)
    : httpEndpoint(std::make_shared<Pistache::Http::Endpoint>(addr))
{ };

void UserApi::init(size_t thr = 2) {
    auto opts = Pistache::Http::Endpoint::options()
        .threads(thr)
        .flags(Pistache::Tcp::Options::ReusePort);
    httpEndpoint->init(opts);
    setupRoutes();
}

void UserApi::start() {
    httpEndpoint->setHandler(router.handler());
    httpEndpoint->serve();
}

void UserApi::shutdown() {
    httpEndpoint->shutdown();
}

void UserApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Post(router, base + "/role", Routes::bind(&UserApi::create_role_handler, this));
    Routes::Post(router, base + "/task", Routes::bind(&UserApi::create_task_handler, this));
    Routes::Post(router, base + "/user", Routes::bind(&UserApi::create_user_handler, this));
    Routes::Delete(router, base + "/role/:roleId", Routes::bind(&UserApi::delete_role_handler, this));
    Routes::Delete(router, base + "/task/:taskId", Routes::bind(&UserApi::delete_task_handler, this));
    Routes::Delete(router, base + "/user/:userId", Routes::bind(&UserApi::delete_user_handler, this));
    Routes::Get(router, base + "/projects", Routes::bind(&UserApi::get_project_handler, this));
    Routes::Get(router, base + "/projectfilters", Routes::bind(&UserApi::get_projects_filters_handler, this));
    Routes::Get(router, base + "/role/:roleId", Routes::bind(&UserApi::get_role_by_id_handler, this));
    Routes::Get(router, base + "/roles", Routes::bind(&UserApi::get_roles_handler, this));
    Routes::Get(router, base + "/task/:taskId", Routes::bind(&UserApi::get_task_by_id_handler, this));
    Routes::Get(router, base + "/taskname/:taskName", Routes::bind(&UserApi::get_task_by_name_handler, this));
    Routes::Get(router, base + "/taskfilters", Routes::bind(&UserApi::get_task_filters_handler, this));
    Routes::Get(router, base + "/tasks", Routes::bind(&UserApi::get_tasks_handler, this));
    Routes::Get(router, base + "/user/:userId", Routes::bind(&UserApi::get_user_by_id_handler, this));
    Routes::Get(router, base + "/username/:username", Routes::bind(&UserApi::get_user_by_name_handler, this));
    Routes::Get(router, base + "/users", Routes::bind(&UserApi::get_users_handler, this));
    Routes::Get(router, base + "/userfilters", Routes::bind(&UserApi::get_users_filters_handler, this));
    Routes::Patch(router, base + "/task/:taskId", Routes::bind(&UserApi::update_task_handler, this));
    Routes::Patch(router, base + "/user/:userId", Routes::bind(&UserApi::update_user_handler, this));

    // Default handler, called when a route is not found
    router.addCustomHandler(Routes::bind(&UserApi::user_api_default_handler, this));
}

void UserApi::create_role_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    Role body;
    
    try {
      nlohmann::json request_body = nlohmann::json::parse(request.body());
      body.fromJson(request_body); 
      this->create_role(body, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void UserApi::create_task_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    Task body;
    
    try {
      nlohmann::json request_body = nlohmann::json::parse(request.body());
      body.fromJson(request_body); 
      this->create_task(body, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void UserApi::create_user_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    User body;
    
    try {
      nlohmann::json request_body = nlohmann::json::parse(request.body());
      body.fromJson(request_body); 
      this->create_user(body, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void UserApi::delete_role_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto roleId = request.param(":roleId").as<int64_t>();
    
    try {
      this->delete_role(roleId, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void UserApi::delete_task_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto taskId = request.param(":taskId").as<int64_t>();
    
    try {
      this->delete_task(taskId, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void UserApi::delete_user_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto userId = request.param(":userId").as<int64_t>();
    
    try {
      this->delete_user(userId, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void UserApi::get_project_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto filterfield = request.query().get("filterfield");
    auto filtervalue = request.query().get("filtervalue");
    
    try {
      this->get_project(filterfield, filtervalue, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void UserApi::get_projects_filters_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    try {
      this->get_projects_filters(response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void UserApi::get_role_by_id_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto roleId = request.param(":roleId").as<int64_t>();
    
    try {
      this->get_role_by_id(roleId, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void UserApi::get_roles_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    try {
      this->get_roles(response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void UserApi::get_task_by_id_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto taskId = request.param(":taskId").as<int64_t>();
    
    try {
      this->get_task_by_id(taskId, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void UserApi::get_task_by_name_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto taskName = request.param(":taskName").as<std::string>();
    
    try {
      this->get_task_by_name(taskName, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void UserApi::get_task_filters_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    try {
      this->get_task_filters(response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void UserApi::get_tasks_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto filterField = request.query().get("filterField");
    auto filterValue = request.query().get("filterValue");
    
    try {
      this->get_tasks(filterField, filterValue, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void UserApi::get_user_by_id_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto userId = request.param(":userId").as<int64_t>();
    
    try {
      this->get_user_by_id(userId, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void UserApi::get_user_by_name_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto username = request.param(":username").as<std::string>();
    
    try {
      this->get_user_by_name(username, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void UserApi::get_users_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto filterField = request.query().get("filterField");
    auto filterValue = request.query().get("filterValue");
    
    try {
      this->get_users(filterField, filterValue, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void UserApi::get_users_filters_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    try {
      this->get_users_filters(response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void UserApi::update_task_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto taskId = request.param(":taskId").as<int64_t>();
    
    // Getting the query params
    auto taskfiled = request.query().get("taskfiled");
    auto taskvalue = request.query().get("taskvalue");
    
    try {
      this->update_task(taskId, taskfiled, taskvalue, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void UserApi::update_user_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto userId = request.param(":userId").as<int64_t>();
    
    // Getting the query params
    auto userfiled = request.query().get("userfiled");
    auto uservalue = request.query().get("uservalue");
    
    try {
      this->update_user(userId, userfiled, uservalue, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}

void UserApi::user_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}
}

