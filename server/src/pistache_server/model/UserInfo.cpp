/**
* Pet project for tasks managment
* Declare Api between chat bot and server part
*
* OpenAPI spec version: 0.0.1
* Contact: bolik-u13@mail.ru
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "UserInfo.h"

namespace io {
namespace swagger {
namespace server {
namespace model {

UserInfo::UserInfo()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_Username = "";
    m_UsernameIsSet = false;
    m_FirstName = "";
    m_FirstNameIsSet = false;
    m_LastName = "";
    m_LastNameIsSet = false;
    m_Email = "";
    m_EmailIsSet = false;
    m_Phone = "";
    m_PhoneIsSet = false;
    m_UserStatus = 0;
    m_UserStatusIsSet = false;
    m_UserRolesIsSet = false;
    
}

UserInfo::~UserInfo()
{
}

void UserInfo::validate()
{
    // TODO: implement validation
}

nlohmann::json UserInfo::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_IdIsSet)
    {
        val["id"] = m_Id;
    }
    if(m_UsernameIsSet)
    {
        val["username"] = ModelBase::toJson(m_Username);
    }
    if(m_FirstNameIsSet)
    {
        val["firstName"] = ModelBase::toJson(m_FirstName);
    }
    if(m_LastNameIsSet)
    {
        val["lastName"] = ModelBase::toJson(m_LastName);
    }
    if(m_EmailIsSet)
    {
        val["email"] = ModelBase::toJson(m_Email);
    }
    if(m_PhoneIsSet)
    {
        val["phone"] = ModelBase::toJson(m_Phone);
    }
    if(m_UserStatusIsSet)
    {
        val["userStatus"] = m_UserStatus;
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_UserRoles )
        {
//            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["userRoles"] = jsonArray;
        }
    }
    

    return val;
}

void UserInfo::fromJson(nlohmann::json& val)
{
    if(val.find("id") != val.end())
    {
        setId(val.at("id"));
    }
    if(val.find("username") != val.end())
    {
        setUsername(val.at("username"));
        
    }
    if(val.find("firstName") != val.end())
    {
        setFirstName(val.at("firstName"));
        
    }
    if(val.find("lastName") != val.end())
    {
        setLastName(val.at("lastName"));
        
    }
    if(val.find("email") != val.end())
    {
        setEmail(val.at("email"));
        
    }
    if(val.find("phone") != val.end())
    {
        setPhone(val.at("phone"));
        
    }
    if(val.find("userStatus") != val.end())
    {
        setUserStatus(val.at("userStatus"));
    }
    {
        m_UserRoles.clear();
        nlohmann::json jsonArray;
        if(val.find("userRoles") != val.end())
        {
        for( auto& item : val["userRoles"] )
        {
            m_UserRoles.push_back(item);
            
        }
        }
    }
    
}


int64_t UserInfo::getId() const
{
    return m_Id;
}
void UserInfo::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool UserInfo::idIsSet() const
{
    return m_IdIsSet;
}
void UserInfo::unsetId()
{
    m_IdIsSet = false;
}
std::string UserInfo::getUsername() const
{
    return m_Username;
}
void UserInfo::setUsername(std::string value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}
bool UserInfo::usernameIsSet() const
{
    return m_UsernameIsSet;
}
void UserInfo::unsetUsername()
{
    m_UsernameIsSet = false;
}
std::string UserInfo::getFirstName() const
{
    return m_FirstName;
}
void UserInfo::setFirstName(std::string value)
{
    m_FirstName = value;
    m_FirstNameIsSet = true;
}
bool UserInfo::firstNameIsSet() const
{
    return m_FirstNameIsSet;
}
void UserInfo::unsetFirstName()
{
    m_FirstNameIsSet = false;
}
std::string UserInfo::getLastName() const
{
    return m_LastName;
}
void UserInfo::setLastName(std::string value)
{
    m_LastName = value;
    m_LastNameIsSet = true;
}
bool UserInfo::lastNameIsSet() const
{
    return m_LastNameIsSet;
}
void UserInfo::unsetLastName()
{
    m_LastNameIsSet = false;
}
std::string UserInfo::getEmail() const
{
    return m_Email;
}
void UserInfo::setEmail(std::string value)
{
    m_Email = value;
    m_EmailIsSet = true;
}
bool UserInfo::emailIsSet() const
{
    return m_EmailIsSet;
}
void UserInfo::unsetEmail()
{
    m_EmailIsSet = false;
}
std::string UserInfo::getPhone() const
{
    return m_Phone;
}
void UserInfo::setPhone(std::string value)
{
    m_Phone = value;
    m_PhoneIsSet = true;
}
bool UserInfo::phoneIsSet() const
{
    return m_PhoneIsSet;
}
void UserInfo::unsetPhone()
{
    m_PhoneIsSet = false;
}
int32_t UserInfo::getUserStatus() const
{
    return m_UserStatus;
}
void UserInfo::setUserStatus(int32_t value)
{
    m_UserStatus = value;
    m_UserStatusIsSet = true;
}
bool UserInfo::userStatusIsSet() const
{
    return m_UserStatusIsSet;
}
void UserInfo::unsetUserStatus()
{
    m_UserStatusIsSet = false;
}
std::vector<int64_t>& UserInfo::getUserRoles()
{
    return m_UserRoles;
}
bool UserInfo::userRolesIsSet() const
{
    return m_UserRolesIsSet;
}
void UserInfo::unsetUserRoles()
{
    m_UserRolesIsSet = false;
}

}
}
}
}

