/**
* Pet project for tasks managment
* Declare Api between chat bot and server part
*
* OpenAPI spec version: 0.0.1
* Contact: bolik-u13@mail.ru
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * Task.h
 *
 * 
 */

#ifndef Task_H_
#define Task_H_


#include "ModelBase.h"

#include <string>

namespace io {
namespace swagger {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Task
    : public ModelBase
{
public:
    Task();
    virtual ~Task();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// Task members

    /// <summary>
    /// 
    /// </summary>
    std::string getName() const;
    void setName(std::string value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// 
    /// </summary>
    int64_t getUsercreator() const;
    void setUsercreator(int64_t value);
    bool usercreatorIsSet() const;
    void unsetUsercreator();
    /// <summary>
    /// 
    /// </summary>
    int64_t getUserexecutor() const;
    void setUserexecutor(int64_t value);
    bool userexecutorIsSet() const;
    void unsetUserexecutor();
    /// <summary>
    /// 
    /// </summary>
    int64_t getPriority() const;
    void setPriority(int64_t value);
    bool priorityIsSet() const;
    void unsetPriority();
    /// <summary>
    /// 
    /// </summary>
    std::string getStatus() const;
    void setStatus(std::string value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// 
    /// </summary>
    std::string getStored() const;
    void setStored(std::string value);
    bool storedIsSet() const;
    void unsetStored();

protected:
    std::string m_Name;
    bool m_NameIsSet;
    std::string m_Description;
    bool m_DescriptionIsSet;
    int64_t m_Usercreator;
    bool m_UsercreatorIsSet;
    int64_t m_Userexecutor;
    bool m_UserexecutorIsSet;
    int64_t m_Priority;
    bool m_PriorityIsSet;
    std::string m_Status;
    bool m_StatusIsSet;
    std::string m_Stored;
    bool m_StoredIsSet;
};

}
}
}
}

#endif /* Task_H_ */
