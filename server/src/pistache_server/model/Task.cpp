/**
* Pet project for tasks managment
* Declare Api between chat bot and server part
*
* OpenAPI spec version: 0.0.1
* Contact: bolik-u13@mail.ru
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "Task.h"

namespace io {
namespace swagger {
namespace server {
namespace model {

Task::Task()
{
    m_Name = "";
    m_NameIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    m_Usercreator = 0L;
    m_UsercreatorIsSet = false;
    m_Userexecutor = 0L;
    m_UserexecutorIsSet = false;
    m_Priority = 0L;
    m_PriorityIsSet = false;
    m_Status = "";
    m_StatusIsSet = false;
    m_Stored = "";
    m_StoredIsSet = false;
    
}

Task::~Task()
{
}

void Task::validate()
{
    // TODO: implement validation
}

nlohmann::json Task::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_NameIsSet)
    {
        val["name"] = ModelBase::toJson(m_Name);
    }
    if(m_DescriptionIsSet)
    {
        val["description"] = ModelBase::toJson(m_Description);
    }
    if(m_UsercreatorIsSet)
    {
        val["usercreator"] = m_Usercreator;
    }
    if(m_UserexecutorIsSet)
    {
        val["userexecutor"] = m_Userexecutor;
    }
    if(m_PriorityIsSet)
    {
        val["priority"] = m_Priority;
    }
    if(m_StatusIsSet)
    {
        val["status"] = ModelBase::toJson(m_Status);
    }
    if(m_StoredIsSet)
    {
        val["stored"] = ModelBase::toJson(m_Stored);
    }
    

    return val;
}

void Task::fromJson(nlohmann::json& val)
{
    if(val.find("name") != val.end())
    {
        setName(val.at("name"));
        
    }
    if(val.find("description") != val.end())
    {
        setDescription(val.at("description"));
        
    }
    if(val.find("usercreator") != val.end())
    {
        setUsercreator(val.at("usercreator"));
    }
    if(val.find("userexecutor") != val.end())
    {
        setUserexecutor(val.at("userexecutor"));
    }
    if(val.find("priority") != val.end())
    {
        setPriority(val.at("priority"));
    }
    if(val.find("status") != val.end())
    {
        setStatus(val.at("status"));
        
    }
    if(val.find("stored") != val.end())
    {
        setStored(val.at("stored"));
        
    }
    
}


std::string Task::getName() const
{
    return m_Name;
}
void Task::setName(std::string value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool Task::nameIsSet() const
{
    return m_NameIsSet;
}
void Task::unsetName()
{
    m_NameIsSet = false;
}
std::string Task::getDescription() const
{
    return m_Description;
}
void Task::setDescription(std::string value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool Task::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void Task::unsetDescription()
{
    m_DescriptionIsSet = false;
}
int64_t Task::getUsercreator() const
{
    return m_Usercreator;
}
void Task::setUsercreator(int64_t value)
{
    m_Usercreator = value;
    m_UsercreatorIsSet = true;
}
bool Task::usercreatorIsSet() const
{
    return m_UsercreatorIsSet;
}
void Task::unsetUsercreator()
{
    m_UsercreatorIsSet = false;
}
int64_t Task::getUserexecutor() const
{
    return m_Userexecutor;
}
void Task::setUserexecutor(int64_t value)
{
    m_Userexecutor = value;
    m_UserexecutorIsSet = true;
}
bool Task::userexecutorIsSet() const
{
    return m_UserexecutorIsSet;
}
void Task::unsetUserexecutor()
{
    m_UserexecutorIsSet = false;
}
int64_t Task::getPriority() const
{
    return m_Priority;
}
void Task::setPriority(int64_t value)
{
    m_Priority = value;
    m_PriorityIsSet = true;
}
bool Task::priorityIsSet() const
{
    return m_PriorityIsSet;
}
void Task::unsetPriority()
{
    m_PriorityIsSet = false;
}
std::string Task::getStatus() const
{
    return m_Status;
}
void Task::setStatus(std::string value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool Task::statusIsSet() const
{
    return m_StatusIsSet;
}
void Task::unsetStatus()
{
    m_StatusIsSet = false;
}
std::string Task::getStored() const
{
    return m_Stored;
}
void Task::setStored(std::string value)
{
    m_Stored = value;
    m_StoredIsSet = true;
}
bool Task::storedIsSet() const
{
    return m_StoredIsSet;
}
void Task::unsetStored()
{
    m_StoredIsSet = false;
}

}
}
}
}

